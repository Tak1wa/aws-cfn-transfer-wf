AWSTemplateFormatVersion: 2010-09-09
Description: ---
Parameters: 
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.10.0/24
  AllowCidr:
    Type: String
    Default: 0.0.0.0/0
  UserName:
    Type: String
    Default: user1
  UserPublicKey:
    Type: String
Resources: 
  ######################
  # Network
  ######################
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": {Ref: "AWS::Region"}]
      CidrBlock: !Ref PublicSubnet1Cidr
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  EipTransfer:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  ######################
  # SFTP Server
  ######################
  SFTP:
    Type: AWS::Transfer::Server
    Properties: 
      Domain: S3
      Protocols: 
        - SFTP
      EndpointType: VPC
      EndpointDetails: 
        AddressAllocationIds:
          - !GetAtt EipTransfer.AllocationId
        SecurityGroupIds: 
          - !Ref SecurityGroup
        SubnetIds: 
          - !Ref PublicSubnet1
        VpcId: !Ref VPC
      IdentityProviderType: SERVICE_MANAGED
      LoggingRole: !GetAtt TransferLoggingRole.Arn
      WorkflowDetails:
        OnUpload:
          - WorkflowId: !Ref Workflow
            ExecutionRole: !GetAtt WorkflowExecutionRole.Arn
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-sftp-sg
      GroupDescription: ---
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AllowCidr
  TransferLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: 
              Service: transfer.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSTransferLoggingAccess

  ######################
  # SFTP User
  ######################
  TransferUser:
    Type: AWS::Transfer::User
    Properties:
      ServerId: !GetAtt SFTP.ServerId
      HomeDirectory: !Sub "/${S3Bucket}/${UserName}"
      HomeDirectoryType: "PATH"
      Role: !GetAtt TransferExecutionRole.Arn
      UserName: !Ref UserName
      SshPublicKeys: 
        - !Ref UserPublicKey
  TransferExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: 
              Service: transfer.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties: 
      AccessControl: Private
      BucketName: !Sub s3-${AWS::StackName}-${AWS::AccountId}-${AWS::Region}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  ######################
  # SFTP Workflow
  ######################
  Workflow:
    Type: AWS::Transfer::Workflow
    Properties: 
      Steps: 
        - Type: COPY
          CopyStepDetails: 
            Name: !Sub ${AWS::StackName}-copy-step
            DestinationFileLocation:
              S3FileLocation:
                Bucket: !Ref S3Bucket
                Key: "${transfer:UserName}/copy.dat"
            OverwriteExisting: "TRUE"
            SourceFileLocation: "${previous.file}"
        - Type: CUSTOM
          CustomStepDetails: 
            Name: !Sub ${AWS::StackName}-custom-step
            Target: !GetAtt lambdaFunction.Arn
            TimeoutSeconds: 60
            SourceFileLocation: "${previous.file}"
        - Type: DELETE
          DeleteStepDetails:
            Name: !Sub ${AWS::StackName}-delete-step
            SourceFileLocation: "${original.file}"
  WorkflowExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: 
              Service: transfer.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  lambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-transfer-customstep
      Role: !GetAtt lambdaExecutionRole.Arn
      Handler: index.lambda_handler
      Runtime: python3.8
      Code:
        ZipFile: |
          import json
          import boto3
          transfer = boto3.client('transfer')
          def lambda_handler(event, context):
            print(json.dumps(event))
            transfer_response = transfer.send_workflow_step_state(
                WorkflowId=event['serviceMetadata']['executionDetails']['workflowId'],
                ExecutionId=event['serviceMetadata']['executionDetails']['executionId'],
                Token=event['token'],
                Status='SUCCESS'
            )
            return {
              'statusCode': 200,
              'body': json.dumps(transfer_response)
            }
  lambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: 
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSTransferFullAccess
      
          
# Outputs: